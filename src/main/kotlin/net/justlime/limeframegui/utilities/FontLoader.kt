package net.justlime.limeframegui.utilities

import net.justlime.limeframegui.api.LimeFrameAPI
import org.bukkit.configuration.file.YamlConfiguration
import java.io.File

/**
 * A singleton object responsible for loading and parsing the versioned small caps
 * font mappings from a `font.yml` file.
 */
object FontLoader {

    private val fontMapV_19 = mapOf(
        "a" to "·¥Ä",
        "b" to " ô",
        "c" to "·¥Ñ",
        "d" to "·¥Ö",
        "e" to "·¥á",
        "f" to "Íú∞",
        "g" to "…¢",
        "h" to " ú",
        "i" to "…™",
        "j" to "·¥ä",
        "k" to "·¥ã",
        "l" to " ü",
        "m" to "·¥ç",
        "n" to "…¥",
        "o" to "·¥è",
        "p" to "·¥ò",
        "q" to "«´",
        "r" to " Ä",
        "s" to "s",
        "t" to "·¥õ",
        "u" to "·¥ú",
        "v" to "·¥†",
        "w" to "·¥°",
        "x" to "x",
        "y" to " è",
        "z" to "·¥¢",
        "0" to "ùü¨",
        "1" to "ùü≠",
        "2" to "ùüÆ",
        "3" to "ùüØ",
        "4" to "ùü∞",
        "5" to "ùü±",
        "6" to "ùü≤",
        "7" to "ùü≥",
        "8" to "ùü¥",
        "9" to "ùüµ",
        "@" to "Ôº†"
    )
    private val fontMapV_16 = mapOf(
        "a" to "·¥Ä",
        "b" to " ô",
        "c" to "·¥Ñ",
        "d" to "·¥Ö",
        "e" to "·¥á",
        "f" to "Íú∞",
        "g" to "…¢",
        "h" to " ú",
        "i" to "…™",
        "j" to "·¥ä",
        "k" to "·¥ã",
        "l" to " ü",
        "m" to "·¥ç",
        "n" to "…¥",
        "o" to "·¥è",
        "p" to "·¥ò",
        "q" to "«´",
        "r" to " Ä",
        "s" to "s",
        "t" to "·¥õ",
        "u" to "·¥ú",
        "v" to "·¥†",
        "w" to "·¥°",
        "x" to "x",
        "y" to " è",
        "z" to "·¥¢",
    )

    /**
     * Set Font for specific or newer Minecraft Version.
     */
    val defaultFontMap = mapOf("1.20" to fontMapV_19, "1.16" to fontMapV_16)

    /**
     * The loaded font map.
     * The outer key is the Minecraft version string (e.g., "1.19").
     * The inner map contains the character-to-font mappings.
     */
    var capsFont: Map<String, Map<String, String>> = emptyMap()
        private set

    /**
     * Loads the font-type yml file from the plugin's data folder.
     * If the file does not exist, it will be created from the plugin's resources.
     * It then parses the file into the `smallCapsFont` map.
     */
    fun load(fileName: String) {
        val plugin = LimeFrameAPI.getPlugin()
        try {
            val fontFile = File(plugin.dataFolder, fileName)
            if (!fontFile.exists()) {
                plugin.saveResource(fileName, false)
            }
            if (fontFile.exists()) {
                val config = YamlConfiguration.loadConfiguration(fontFile)
                if (config.getKeys(false).isEmpty()) {
                    return
                }

                val loadedMap = mutableMapOf<String, Map<String, String>>()
                for (versionKey in config.getKeys(false)) {
                    val versionSection = config.getConfigurationSection("$versionKey") ?: continue
                    val characterMap = mutableMapOf<String, String>()

                    for (charKey in versionSection.getKeys(false)) {
                        versionSection.getString(charKey)?.let { characterMap[charKey] = it }
                    }
                    loadedMap["1.$versionKey"] = characterMap
                }
                capsFont = loadedMap

            } else {
                loadDefaultFonts()
            }
        } catch (e: Exception) {
            loadDefaultFonts()
        }
    }

    private fun loadDefaultFonts() {
        capsFont = defaultFontMap
    }
}